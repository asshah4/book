[
["index.html", "Thoughts Preface", " Thoughts Anish Shah 2020-06-05 Preface This initially was designed to help document exploratory concepts that were developed using the card package, but also expanded to clinical concepts leveraging the power of R and Rmarkdown. As this develops, it will likely create its own order. Currently it revolves around the principal components: circadian rhythm electrocardiography autonomic physiology clinical medicine "],
["this-project-is-built-with-several-libraries-from-cran.html", "0.1 This project is built with several libraries from CRAN", " 0.1 This project is built with several libraries from CRAN bookdown pkgdown "],
["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction An introduction would go here. "],
["technical.html", "Chapter 2 Technical ", " Chapter 2 Technical "],
["r-and-rstudio.html", "2.1 R and RStudio", " 2.1 R and RStudio I have been learning R since 2010, and have found it to be an excellent: open-source excellent community an outstanding IDE with RStudio package development Currently using R version 4.0.0 (2020-04-24), nicknamed Arbor Day, with RStudio 1.3. "],
["git-and-github.html", "2.2 git and Github", " 2.2 git and Github … "],
["circadian.html", "Chapter 3 Circadian Physiology ", " Chapter 3 Circadian Physiology "],
["chronobiology.html", "3.1 Chronobiology", " 3.1 Chronobiology Will discuss circadian biology/physiology. "],
["circadian-disruption.html", "3.2 Circadian Disruption", " 3.2 Circadian Disruption "],
["cosinor.html", "Chapter 4 Cosinor Analysis", " Chapter 4 Cosinor Analysis The issue with time series analysis is that the data is by its nature circular and thus cannot be easily be analyzed through traditional, linear methods. The following is the development/expansion of the cosinor model to help study circadian rhythms (3). "],
["overview.html", "4.1 Overview", " 4.1 Overview The card package was developed to help tackle this problem. # Library library(card) library(ggplot2) # Dataset data(&quot;twins&quot;) # Example of data ggplot(twins, aes(x = hour, y = rDYX)) + geom_smooth(method = &quot;gam&quot;, se = TRUE) ## `geom_smooth()` using formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; Using the cosinor() function, the characteristics of the circadian pattern can be retrieved. # Cosinor model m &lt;- cosinor(rDYX ~ hour, twins, tau = 24) summary(m) ## Individual Cosinor Model ## ------------------------------------------ ## Call: ## cosinor(&quot;rDYX ~ hour&quot;) ## ## Residuals: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -3.12633 -0.53228 -0.03597 0.00000 0.49132 4.82150 ## ## Coefficients: ## mesor amp phi beta gamma ## 2.8604855 0.2986101 -2.6687044 -0.2658396 0.1360048 The statistical principles behind this method allow for different methods to model, diagnose, and interpret findings. (Refinetti, Cornélissen, and Halberg 2007; Cornelissen 2014) single component cosinor multiple component cosinor population cosinor zero amplitude test lack-of-fit testing confidence intervals (ellipse method) References "],
["single-component-cosinor.html", "4.2 Single component cosinor", " 4.2 Single component cosinor The single component cosinor method is modeled as: \\[Y(t) = M + A cos(2 \\pi t / period) + \\epsilon\\] "],
["population-mean-cosinor.html", "4.3 Population-mean cosinor", " 4.3 Population-mean cosinor Based on the work by Cornelissen et al 2014 (Cornelissen 2014), the population mean cosinor can be estimated by applying the single or multiple component cosinor to each individual. Each parameter can then be “averaged” to estimate the population parameters. \\[\\{\\hat{u} = \\hat{M}_{i} + \\hat\\beta_{i} + \\hat\\gamma_{i} + ... \\}\\] Where \\(i = 1, 2, ..., k\\) for each individual contribution to the population cosinor metrics. # Parameters for population mean cosinor df &lt;- twins[1:105, c(&quot;rDYX&quot;, &quot;hour&quot;, &quot;patid&quot;)] names(df) &lt;- c(&quot;y&quot;, &quot;t&quot;, &quot;pop&quot;) # Number of individuals k &lt;- length(unique(df$pop)) # Individual cosinor models are implemented for each individual kCosinors &lt;- with( df, by(df, pop, function(x) { cosinor(y ~ t, data = x, tau = 24) }) ) # The coefficients have to be extracted and summarized tbl &lt;- sapply(kCosinors, stats::coef) coef_names &lt;- c(&quot;mesor&quot;, &quot;amp&quot;, &quot;phi&quot;, &quot;beta&quot;, &quot;gamma&quot;) rownames(tbl) &lt;- coef_names xmat &lt;- t(tbl) # Get mean for each parameter (mesor, beta, gamma), ignoring averaged amp/phi coefs &lt;- apply(xmat, MARGIN = 2, function(x) { sum(x) / k }) mesor &lt;- unname(coefs[&quot;mesor&quot;]) beta &lt;- unname(coefs[&quot;beta&quot;]) gamma &lt;- unname(coefs[&quot;gamma&quot;]) # Get amplitude amp &lt;- sqrt(beta^2 + gamma^2) # Acrophase (phi) must be in correct quadrant sb &lt;- sign(beta) sg &lt;- sign(gamma) theta &lt;- atan(abs(gamma / beta)) if ((sb == 1 | sb == 0) &amp; sg == 1) { phi &lt;- -theta } else if (sb == -1 &amp; (sg == 1 | sg == 0)) { phi &lt;- theta - pi } else if ((sb == -1 | sb == 0) &amp; sg == -1) { phi &lt;- -theta - pi } else if (sb == 1 &amp; (sg == -1 | sg == 0)) { phi &lt;- theta - (2 * pi) } # Update coefficients coefs[&quot;amp&quot;] &lt;- amp coefs[&quot;phi&quot;] &lt;- phi # Updated coefficients names(coefs) &lt;- coef_names print(coefs) ## mesor amp phi beta gamma ## 2.73343430 0.13693035 -1.72263447 -0.02071145 0.13535493 This model can be visualized as well if we group each individual by their predicted values, based on the individual cosinor mesor, amplitude, and acrophase. model &lt;- data.frame(xmat) References "],
["package.html", "Chapter 5 Package Development", " Chapter 5 Package Development CRAN supports the publishing of open-source packages in R. The workflow on package development is improved by the following supporting packages: devtools pkgdown usethis testthat roxygen hardhat (creating modeling functions) In addition, git and Github are fundamental for version control in the development process. These resources were used in the development of my first package, card. "],
["documenting-a-package.html", "5.1 Documenting a Package", " 5.1 Documenting a Package The use of roxygen is fundamental in the process of package development, forcing explanatory variables and parameters to be documented as functions are developed. 5.1.1 Website The package pkgdown helps turn documentation into a visually attractive and navigable website. In addition, in the fashion of R, package logos are developed with a hexagon-framed sticker, representing a package. The development of a hex sticker is aided by the use of: https://github.com/GuangchuangYu/hexSticker http://connect.thinkr.fr/hexmake/ "],
["vcg.html", "Chapter 6 Vectorcardiography ", " Chapter 6 Vectorcardiography "],
["vector-gradients.html", "6.1 Vector Gradients", " 6.1 Vector Gradients Mark Josephson in 1988 found that repolarization became non-uniform post-infarction, which was the suggestive substrate of VT/VF. The dispersion of the total recovery time is suggestive of global electrical heterogeneity, which can then predict SCD. Vectorcardiography (VCG) characterizes the electrical heart vector movement through a cardiac cycle. This is understood best through the spatial ventricular gradient vector (SVG), as described by Frank Wilson in 1934, and expanded upon by J. Willis Hurst. This is different and independent of the sequence of ventricular activation, which can be seen on ECG. The work by Larisa Tereschchenko has helped to compute these concepts for analytical approaches (Tereshchenko 2018). The SVG points to different locations in healthy versus diseased hearts. Summary of SVG: Points along the direction of greatest activation and recovery time (which is perpendicular to the line of conduction block, such as scar) Points towards to the area where the total recovery time is the shortest Depends on the heterogeneity of action potential across entire myocardium Characterizes the degree of heterogeneity of recovery time across the ventricles Steepness of the gradient determines magnitude of the SVG (areas of contrasting recovery time thus give largest SVG) References "],
["global-electrical-heterogeneity.html", "6.2 Global Electrical Heterogeneity", " 6.2 Global Electrical Heterogeneity The SVG can be broken down in 5 VCG parameters to describe the overall global electrical heterogeneity of the heart, as seen in the Figure below (Waks et al. 2016). SVG magnitude SVG azimuth SVG elevation Spatial QRS-T angle = the three-dimensional angle between mean spatial QRS-vector and mean spatial T-vector, measured in degrees Sum absolute QRST integral = scalar analog of the SVG, calculated as absolute value under QRS cmplex and T-wave, measured in millivolts (integral of voltage over time) vector gradient "]
]
